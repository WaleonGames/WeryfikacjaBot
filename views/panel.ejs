<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel użytkownika</title>
    <link rel="stylesheet" href="/css/panel.css">
    <link rel="stylesheet" href="/css/toast.css">
    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
</head>
<body>
        <header class="header">
            <div class="header-content">
                <h1><%= username %></h1>
                <a href="/panel/logout">Wyloguj się!</a>
            </div>
        </header>
    
        <!-- Wrapper na główną zawartość dla układu Flexbox -->
        <div class="container-wrapper">
            <!-- Lewa kolumna, można tu dodać dodatkowe informacje -->
            <div class="container left">
                <h2>Informacje o stronie</h2>
                <p>Wersja <span class="beta">beta</span> w projekcie, <span class="underline">możliwe błędy</span> będą jeszcze.</p>
                <p><span class="important">Ważne</span> chcesz zgłosić błąd, albo inna sprawa to <a href="/panel/user/<%= id %>/feedback">skontaktuj się z ekipą HTG</a>!</p>
                <p><span class="new">Nowość</span> Pozostało wsporo nowości dodanych więcej informacji na <a href="https://discord.gg/dcdVDE6Kn6">serwerze discord HTG</a>.</p>
            </div>
    
            <!-- Środkowa kolumna (główna sekcja profilu) -->
            <div class="container center">
                <h1>Profil użytkownika</h1>

                <!-- Wyświetlanie avatara -->
                <img src="<%= avatar %>" alt="Avatar" width="100" height="100">

                <!-- Wyświetlanie nazwy użytkownika i numeru tagu -->
                <h2><%= username %></h2>

                <!-- Wyświetlanie ID użytkownika -->
                <p>ID: <%= id %></p>
            </div>
    
            <!-- Prawa kolumna (zarządzanie rolami) -->
            <div class="container right">
                <h2>Wybierz, jakie role chcesz mieć na profilu</h2>
                <form action="/api/v1/role/add/<%= guildId %>/<%= id %>" method="post" id="roleForm">
                    <div class="roles-container">
                        <select name="roles[]" class="roles" id="roles" multiple> <!-- 'multiple' pozwala na wybór wielu ról -->
                            <% aroles.forEach(role => { %>
                                <option value="<%= role %>" <%= roles.includes(role) ? 'selected' : '' %>>
                                    <%= role %>
                                </option>
                            <% }); %>
                        </select>
                    </div>                                        
                    <button type="submit">Nadaj role</button>
                </form>            
            </div>
        </div>

    <!-- Stopka -->
    <div class="footer">
        <p>
            <a href="https://discord.gg/QyHSdWNZGe" class="footer-link">Ciężka Praca 22/25</a> x HTGMC Weryfikacja, 
            <a href="/panel/logout" class="footer-link">Wyloguj się teraz!</a>
            <p>Ostatnia aktualizacja: <span id="last-update"><%= lastUpdate %></span></p>
        </p>
    </div>

    <div id="very-banner" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); color: white; display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div>
            <h2>Podaj dane które są wymagane do zweryfikowania poprawnego</h2>
            <p>
                <b>* Wymagane są pola</b><br>
                <b style="color: red; text-decoration: underline;">UWAGA NIE SĄ ZAPISYWANE TYLKO WYSYŁANY NA SERWER DISCORD CIĘŻKA PRACA 22/25</b>
            </p>
            <form action="/api/v1/verify/<%= guildId %>/<%= id %>" method="post" id="verifyForm">
                <label for="name">* Jak się nazywasz?</label>
                <input type="text" name="name" id="name" placeholder="Napisz tylko twoje imie" required>
                <label for="year">* Ile masz lat</label>
                <input type="number" name="year" id="year" placeholder="Wystarcza rocznik albo aktualny wiek" required>
                <label for="youfound">* Jak znalazłeś nasz?</label>
                <input type="text" name="youfound" id="youfound" placeholder="Napisz w jednym zdaniu jak znalazłeś" required>
                <label for="mikrofon">* Czy masz mikrofon?</label>
                <input type="text" name="mikrofon" id="mikrofon" placeholder="Wystarcza TAK/NIE albo YES/NO" required>
                <button type="submit">Nadaj Range Weryfikacja</button>
            </form>
        </div>
    </div>

    <!-- Sprawdzamy, czy są jakieś powiadomienia -->
    <% if (notifications && notifications.length > 0) { %>
        <div class="notifications">
            <% notifications.forEach(notification => { %>
                <div class="notification <%= notification.type %>">
                    <%= notification.message %>
                </div>
            <% }) %>
        </div>
    <% } %>

    <script>
        // Funkcja do sprawdzenia obecności parametru 'very=true' w URL
        function getUrlParameter(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }
    
        // Jeśli w URL jest parametr 'very=true', zapisujemy w localStorage, że użytkownik został zweryfikowany
        if (getUrlParameter('very') === 'true') {
            localStorage.setItem('verifiess', 'true');
        }
    
        // Sprawdzamy, czy użytkownik został zweryfikowany
        if (localStorage.getItem('verifiess') === 'true') {
            // Ukrywamy baner weryfikacyjny, jeśli użytkownik jest zweryfikowany
            document.getElementById('very-banner').style.display = 'none';
        }

        // Ustawiamy animację znikania powiadomień
        setTimeout(() => {
            const notifications = document.querySelectorAll('.notification');
            notifications.forEach(notification => {
                notification.classList.add('hidden');
            });
        }, 5000); // Po 5 sekundach dodajemy klasę .hidden


        const socket = io();

        // Nasłuchiwanie na aktualizację ról
        setTimeout(() => {
            socket.on('roleUpdate', (updatedRoles) => {
                document.getElementById('userRoles').innerText = 'Role: ' + updatedRoles;  // Aktualizowanie ról
            });
        }, 5000); // Po 5 sekundach dodajemy klasę .hidden

        // Jeśli chcesz, by czas był odświeżany bez przeładowania strony
        setInterval(() => {
            fetch('/panel/user/last-update')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('last-update').innerText = data.lastUpdate;
                })
                .catch(error => {
                    console.error('Błąd podczas pobierania daty ostatniej aktualizacji:', error);
                });
        }, 60000); // Odświeżaj co minutę

        // Skrypt do pokazania formularza feedback po kliknięciu przycisku
        document.getElementById('feedbackButton').addEventListener('click', function() {
            const form = document.getElementById('feedbackForm');
            // Przełączamy klasę 'show' - pokazujemy/ukrywamy formularz
            form.classList.toggle('show');
        });
    </script>    
</body>
</html>
